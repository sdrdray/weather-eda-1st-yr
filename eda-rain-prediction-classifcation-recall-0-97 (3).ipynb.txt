{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:32:50.354081Z","iopub.status.busy":"2021-10-24T22:32:50.353764Z","iopub.status.idle":"2021-10-24T22:32:50.366160Z","shell.execute_reply":"2021-10-24T22:32:50.365176Z","shell.execute_reply.started":"2021-10-24T22:32:50.354038Z"},"trusted":true},"outputs":[],"source":["# This Python 3 environment comes with many helpful analytics libraries installed\n","# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n","# For example, here's several helpful packages to load\n","\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","# Input data files are available in the read-only \"../input/\" directory\n","# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","import os\n","\n","# Specify the path to your directory\n","directory_path = \"C:\\\\Users\\\\Subhradip Debray\\\\Downloads\\\\train\"\n","\n","# Walk through the directory\n","for dirname, _, filenames in os.walk(directory_path):\n","    for filename in filenames:\n","        # Print the full path of each file\n","        print(os.path.join(dirname, filename))\n","\n","# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n","# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:32:50.368354Z","iopub.status.busy":"2021-10-24T22:32:50.368030Z","iopub.status.idle":"2021-10-24T22:32:52.924396Z","shell.execute_reply":"2021-10-24T22:32:52.923492Z","shell.execute_reply.started":"2021-10-24T22:32:50.368309Z"},"id":"IQHOFUyf-hwZ","trusted":true},"outputs":[],"source":["# Import libraries\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import folium\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from sklearn.feature_selection import RFE\n","from sklearn.model_selection import train_test_split, RandomizedSearchCV\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.linear_model import LogisticRegressionCV\n","from sklearn.svm import SVC\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\n","from xgboost import XGBClassifier\n","from lightgbm import LGBMClassifier\n","from sklearn.metrics import recall_score, confusion_matrix, roc_auc_score\n","import pickle\n","\n","\n","import warnings\n","warnings.filterwarnings('ignore')"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:32:52.926415Z","iopub.status.busy":"2021-10-24T22:32:52.925968Z","iopub.status.idle":"2021-10-24T22:32:53.197003Z","shell.execute_reply":"2021-10-24T22:32:53.196208Z","shell.execute_reply.started":"2021-10-24T22:32:52.926367Z"},"id":"JNUvMkf7_9G5","trusted":true},"outputs":[],"source":["# load the data\n","weather_data = pd.read_csv(\"forecast_data.csv\")\n","location_data = pd.read_csv(\"location_data.csv\")"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:32:53.199079Z","iopub.status.busy":"2021-10-24T22:32:53.198827Z","iopub.status.idle":"2021-10-24T22:32:53.220113Z","shell.execute_reply":"2021-10-24T22:32:53.219214Z","shell.execute_reply.started":"2021-10-24T22:32:53.199049Z"},"id":"hob0UKRp-caw","outputId":"2569a1af-008c-435c-834e-03f2c3cbb2db","trusted":true},"outputs":[],"source":["location_data.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:32:53.222390Z","iopub.status.busy":"2021-10-24T22:32:53.222074Z","iopub.status.idle":"2021-10-24T22:32:54.073516Z","shell.execute_reply":"2021-10-24T22:32:54.072880Z","shell.execute_reply.started":"2021-10-24T22:32:53.222347Z"},"id":"XgRPHZX9_Ehi","outputId":"516665fa-43aa-4873-d2ba-b4482c0486ba","trusted":true},"outputs":[],"source":["import pandas as pd\n","import folium\n","\n","# Load your data here\n","# location_data = pd.read_csv(\"path_to_your_csv\")\n","\n","# Filter out rows with non-numeric lat and lon values\n","location_data = location_data[pd.to_numeric(location_data['lat'], errors='coerce').notnull()]\n","location_data = location_data[pd.to_numeric(location_data['lon'], errors='coerce').notnull()]\n","\n","# Convert lat and lon columns to float\n","location_data['lat'] = location_data['lat'].astype(float)\n","location_data['lon'] = location_data['lon'].astype(float)\n","\n","# Verify the conversion\n","print(location_data.dtypes)\n","\n","# Coordinates for India\n","INDIA_COORDINATES = [20.5937, 78.9629]\n","\n","# Create a map centered around India\n","my_map = folium.Map(location=INDIA_COORDINATES)\n","\n","# Define a function to add markers for each location\n","def plot_map(df):\n","    folium.Marker(location=[df['lat'], df['lon']], popup=df['name']).add_to(my_map)\n","\n","# Apply the function to the dataframe\n","location_data.apply(plot_map, axis=1)\n","\n","# Fit the map to the bounds of India\n","my_map.fit_bounds([[30.3753, 69.3451], [7.8731, 80.7718]])\n","\n","# Save the map to an HTML file\n","my_map.save(\"india_map.html\")\n","\n","# Display the map\n","my_map\n"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:32:54.074544Z","iopub.status.busy":"2021-10-24T22:32:54.074348Z","iopub.status.idle":"2021-10-24T22:32:54.104748Z","shell.execute_reply":"2021-10-24T22:32:54.104080Z","shell.execute_reply.started":"2021-10-24T22:32:54.074519Z"},"id":"FZT-M4JKAFAm","outputId":"70c12fb3-ebf4-4a00-dea8-7ae9a98cb62c","trusted":true},"outputs":[],"source":["weather_data.head()"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# Load datasets\n","astro_data = pd.read_csv(\"C:\\\\Users\\\\Subhradip Debray\\\\Downloads\\\\train\\\\astro_data.csv\")\n","forecast_data = pd.read_csv(\"C:\\\\Users\\\\Subhradip Debray\\\\Downloads\\\\train\\\\forecast_data.csv\")\n","location_data = pd.read_csv(\"C:\\\\Users\\\\Subhradip Debray\\\\Downloads\\\\train\\\\location_data.csv\")\n","\n","# Print column names of forecast_data\n","print(forecast_data.columns)\n","\n","# Example plots for astro_data\n","# Histogram for sunrise\n","sns.histplot(astro_data[\"sunrise\"], kde=True)\n","plt.title(\"Histogram of Sunrise Times\")\n","plt.xlabel(\"Sunrise Time\")\n","plt.ylabel(\"Frequency\")\n","plt.show()\n","\n","# Histogram for moonrise\n","sns.histplot(astro_data[\"moonrise\"], kde=True)\n","plt.title(\"Histogram of Moonrise Times\")\n","plt.xlabel(\"Moonrise Time\")\n","plt.ylabel(\"Frequency\")\n","plt.show()\n","\n","# Histogram for forecast_data\n","# Step 1: Check for non-numeric values\n","non_numeric_values = forecast_data[\"temp_c\"].loc[~forecast_data[\"temp_c\"].astype(str).str.replace('.', '', 1).str.isnumeric()]\n","print(non_numeric_values)\n","\n","# Step 2: Convert the column to numeric\n","forecast_data[\"temp_c\"] = pd.to_numeric(forecast_data[\"temp_c\"], errors='coerce')\n","\n","# Step 3: Handle missing or invalid values\n","forecast_data[\"temp_c\"].fillna(0, inplace=True)  # Replace missing values with 0 or any other suitable value\n","\n","# Now, try creating the histogram plot again\n","sns.histplot(forecast_data[\"temp_c\"], kde=True)\n","plt.title(\"Histogram of Temperature (Celsius)\")\n","plt.xlabel(\"Temperature (Celsius)\")\n","plt.ylabel(\"Frequency\")\n","plt.show()\n","\n","# Step 1: Check for non-numeric values in precipitation column\n","non_numeric_values_precip = forecast_data[\"precip_mm\"].loc[~forecast_data[\"precip_mm\"].astype(str).str.replace('.', '', 1).str.isnumeric()]\n","print(non_numeric_values_precip)\n","\n","# Step 2: Convert the precipitation column to numeric\n","forecast_data[\"precip_mm\"] = pd.to_numeric(forecast_data[\"precip_mm\"], errors='coerce')\n","\n","# Step 3: Handle missing or invalid values for precipitation\n","forecast_data[\"precip_mm\"].fillna(0, inplace=True)  # Replace missing values with 0 or any other suitable value\n","\n","# Now, create the histogram plot for precipitation in mm\n","sns.histplot(forecast_data[\"precip_mm\"], kde=True)\n","plt.title(\"Histogram of Precipitation (mm)\")\n","plt.xlabel(\"Precipitation (mm)\")\n","plt.ylabel(\"Frequency\")\n","plt.show()\n","\n","\n","# Histogram for location_data\n","# Latitude\n","sns.histplot(location_data[\"lat\"], kde=True)\n","plt.title(\"Histogram of Latitude\")\n","plt.xlabel(\"Latitude\")\n","plt.ylabel(\"Frequency\")\n","plt.show()\n","\n","# Longitude\n","sns.histplot(location_data[\"lon\"], kde=True)\n","plt.title(\"Histogram of Longitude\")\n","plt.xlabel(\"Longitude\")\n","plt.ylabel(\"Frequency\")\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:32:54.106311Z","iopub.status.busy":"2021-10-24T22:32:54.105645Z","iopub.status.idle":"2021-10-24T22:32:54.494037Z","shell.execute_reply":"2021-10-24T22:32:54.493409Z","shell.execute_reply.started":"2021-10-24T22:32:54.106281Z"},"id":"oGdRhfQfBQla","trusted":true},"outputs":[],"source":["import json\n","print(forecast_data.head())\n","import json\n","\n","# Function to extract the 'text' value from the JSON-like string\n","def extract_condition_text(x):\n","    try:\n","        condition_json = json.loads(x)\n","        return condition_json['text']\n","    except (json.JSONDecodeError, TypeError, KeyError):\n","        return None\n","\n","# Apply the function to create the 'condition_text' column\n","forecast_data['condition_text'] = forecast_data['condition'].apply(extract_condition_text)\n","\n","# Display the first few rows of the DataFrame with the new column\n","print(forecast_data.head())\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:32:54.495751Z","iopub.status.busy":"2021-10-24T22:32:54.494981Z","iopub.status.idle":"2021-10-24T22:32:54.521666Z","shell.execute_reply":"2021-10-24T22:32:54.520793Z","shell.execute_reply.started":"2021-10-24T22:32:54.495715Z"},"id":"BAmKE3daAtsN","outputId":"00cc45ae-5464-4051-89a9-a678374bbf34","trusted":true},"outputs":[],"source":["weather_data.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:32:54.523145Z","iopub.status.busy":"2021-10-24T22:32:54.522834Z","iopub.status.idle":"2021-10-24T22:32:54.532165Z","shell.execute_reply":"2021-10-24T22:32:54.531314Z","shell.execute_reply.started":"2021-10-24T22:32:54.523115Z"},"id":"R1iL2fJPC0q9","trusted":true},"outputs":[],"source":["# Many columns are same just with differnt units, for ex wind_mph and wind_kph. So, it's better to remove the redundancy\n","redundant_columns = ['temp_f', 'wind_kph', 'pressure_in', 'precip_in', 'feelslike_f', 'windchill_f', 'heatindex_f', 'dewpoint_f', 'vis_miles', 'chance_of_rain', 'chance_of_snow','gust_kph']\n","\n","# Drop the redundant information\n","weather_data.drop(redundant_columns, axis=1, inplace=True)"]},{"cell_type":"markdown","metadata":{"id":"tF7Uq81fCEqe"},"source":["# EDA"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:32:54.535441Z","iopub.status.busy":"2021-10-24T22:32:54.535169Z","iopub.status.idle":"2021-10-24T22:32:54.569014Z","shell.execute_reply":"2021-10-24T22:32:54.568061Z","shell.execute_reply.started":"2021-10-24T22:32:54.535367Z"},"id":"C2GWkkj4EVih","outputId":"61ef908e-c28c-4bcb-fc01-d9f609e1f643","trusted":true},"outputs":[],"source":["weather_data.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:32:54.571150Z","iopub.status.busy":"2021-10-24T22:32:54.570524Z","iopub.status.idle":"2021-10-24T22:33:16.669576Z","shell.execute_reply":"2021-10-24T22:33:16.668770Z","shell.execute_reply.started":"2021-10-24T22:32:54.571104Z"},"id":"b9Si09qSBEyi","outputId":"0d2d6bb3-8779-408e-f225-34c3dd02eaa0","trusted":true},"outputs":[],"source":["# Visualise various continuous distributions\n","continuous_distributions = ['temp_c', 'wind_mph', \n","                            'wind_degree', 'pressure_mb', \n","                            'precip_mm', 'humidity', \n","                            'feelslike_c', 'windchill_c', \n","                            'heatindex_c', 'dewpoint_c', \n","                            'vis_km', 'gust_mph']\n","\n","plt.figure(figsize=(18, 16))\n","for i, dist_col in enumerate(continuous_distributions):\n","\n","  # Create subplots\n","  plt.subplot(3, 4, i+1)\n","  sns.histplot(weather_data[dist_col])\n","  plt.title(dist_col + \" Distribution\")"]},{"cell_type":"markdown","metadata":{"id":"rxVCmkYgHgi-"},"source":["**precip_mm columns graph looks empty, lets plot again after altering xticks**"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:33:16.671035Z","iopub.status.busy":"2021-10-24T22:33:16.670818Z","iopub.status.idle":"2021-10-24T22:33:16.983025Z","shell.execute_reply":"2021-10-24T22:33:16.982446Z","shell.execute_reply.started":"2021-10-24T22:33:16.671009Z"},"id":"JR27k5_hG4jG","outputId":"be53083f-efba-45aa-cd80-e314871c4549","trusted":true},"outputs":[],"source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# Set the style\n","plt.style.use('Solarize_Light2')\n","\n","# Create a wider figure\n","plt.figure(figsize=(12, 8))\n","\n","# Plot the histogram\n","weather_data['precip_mm'].hist(bins=25, color='skyblue', edgecolor='black')\n","\n","# Add title and labels\n","plt.title(\"Histogram of Precipitation (mm)\", fontsize=16)\n","plt.xlabel(\"Precipitation (mm)\", fontsize=14)\n","plt.ylabel(\"Frequency\", fontsize=14)\n","\n","# Customize ticks and grid\n","plt.xticks(np.arange(0, 21, 1), fontsize=12)\n","plt.yticks(fontsize=12)\n","plt.grid(axis='y', linestyle='--', alpha=0.7)\n","\n","# Add a legend\n","plt.legend(['Precipitation'], loc='upper right', fontsize=12)\n","\n","# Show plot\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:33:16.984495Z","iopub.status.busy":"2021-10-24T22:33:16.983926Z","iopub.status.idle":"2021-10-24T22:33:17.170062Z","shell.execute_reply":"2021-10-24T22:33:17.169243Z","shell.execute_reply.started":"2021-10-24T22:33:16.984455Z"},"id":"UFlP6ltkHd7P","outputId":"0eac24cd-6901-47ad-af61-4fe65193706b","trusted":true},"outputs":[],"source":["# Plotting categorical discrete variables\n","\n","# 1. Plotting days and nights count\n","plt.figure(figsize=(8,6))\n","sns.countplot(data=weather_data, x='is_day')\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:33:17.171501Z","iopub.status.busy":"2021-10-24T22:33:17.171282Z","iopub.status.idle":"2021-10-24T22:33:17.546051Z","shell.execute_reply":"2021-10-24T22:33:17.545187Z","shell.execute_reply.started":"2021-10-24T22:33:17.171474Z"},"id":"ck5ZoZIsIt8S","outputId":"cfffe141-5ff5-4ade-eb4c-d24b2da38a05","trusted":true},"outputs":[],"source":["weather_data['condition'].value_counts().sort_values().plot(kind='barh', figsize=(10,8))\n","plt.xlabel(\"Weather Conditions\")\n","plt.ylabel(\"Frequency\")\n","plt.grid()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:33:17.547608Z","iopub.status.busy":"2021-10-24T22:33:17.547376Z","iopub.status.idle":"2021-10-24T22:33:17.819016Z","shell.execute_reply":"2021-10-24T22:33:17.818110Z","shell.execute_reply.started":"2021-10-24T22:33:17.547579Z"},"id":"hbqxoMP6LrV2","outputId":"7d2ec89c-aa1d-4a9f-d642-c8215a3eb7d0","trusted":true},"outputs":[],"source":["weather_data['wind_dir'].value_counts().sort_values().plot(kind='bar', figsize=(10,8))\n","plt.xlabel(\"Wind Direction\")\n","plt.ylabel(\"Frequency\")\n","plt.grid()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:33:17.820484Z","iopub.status.busy":"2021-10-24T22:33:17.820241Z","iopub.status.idle":"2021-10-24T22:33:18.197993Z","shell.execute_reply":"2021-10-24T22:33:18.197435Z","shell.execute_reply.started":"2021-10-24T22:33:17.820448Z"},"id":"Q5mlvWoVXQ1w","outputId":"5b2a647e-0018-4f06-c881-b12536f254b9","trusted":true},"outputs":[],"source":["# Plot state distribution\n","weather_data['state'].value_counts().sort_values().plot(kind='barh', figsize=(10,8))\n","plt.xlabel(\"Frequency\")\n","plt.ylabel(\"State\")\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:33:18.199491Z","iopub.status.busy":"2021-10-24T22:33:18.198900Z","iopub.status.idle":"2021-10-24T22:33:18.364577Z","shell.execute_reply":"2021-10-24T22:33:18.363803Z","shell.execute_reply.started":"2021-10-24T22:33:18.199454Z"},"id":"ONFmBOpCXwGy","outputId":"ac421c46-555f-48b1-e6d9-65323e996fde","trusted":true},"outputs":[],"source":["# Plot the count of rainy forecasts\n","sns.countplot(data=weather_data, x='will_it_rain')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:33:18.365723Z","iopub.status.busy":"2021-10-24T22:33:18.365525Z","iopub.status.idle":"2021-10-24T22:33:18.533130Z","shell.execute_reply":"2021-10-24T22:33:18.532384Z","shell.execute_reply.started":"2021-10-24T22:33:18.365697Z"},"id":"uQ-sI7auYbsC","outputId":"c66b0572-2686-4e39-b476-4adbb5e37edb","trusted":true},"outputs":[],"source":["# Plot the count of snow forecasts\n","sns.countplot(data=weather_data, x='will_it_snow')\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"49UaSZP5Yzzy"},"source":["**No forecasts of snow in the past 7 days in the country**"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:33:18.534612Z","iopub.status.busy":"2021-10-24T22:33:18.534404Z","iopub.status.idle":"2021-10-24T22:33:18.545116Z","shell.execute_reply":"2021-10-24T22:33:18.543975Z","shell.execute_reply.started":"2021-10-24T22:33:18.534585Z"},"id":"YAnz9-kYYyql","trusted":true},"outputs":[],"source":["# Drop the snow column as it has constant variance\n","weather_data.drop(['will_it_snow'], axis=1, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:33:18.546665Z","iopub.status.busy":"2021-10-24T22:33:18.546447Z","iopub.status.idle":"2021-10-24T22:33:18.557823Z","shell.execute_reply":"2021-10-24T22:33:18.557051Z","shell.execute_reply.started":"2021-10-24T22:33:18.546639Z"},"id":"2Xm0-8w7q0mD","trusted":true},"outputs":[],"source":["# Group the data by states\n","grouped_state_data = weather_data.groupby('state')"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:33:18.559405Z","iopub.status.busy":"2021-10-24T22:33:18.559145Z","iopub.status.idle":"2021-10-24T22:33:18.944755Z","shell.execute_reply":"2021-10-24T22:33:18.943893Z","shell.execute_reply.started":"2021-10-24T22:33:18.559378Z"},"id":"noDgQPHcokDi","outputId":"440505e9-7742-44c7-8ca1-d715f6c7eb17","trusted":true},"outputs":[],"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","# Load your weather data\n","weather_data = pd.read_csv(\"forecast_data.csv\")\n","\n","# State-wise analysis: calculating the mean temperature for each state\n","state_data = weather_data.groupby('state')['temp_c'].mean().reset_index()\n","\n","# Sorting the data by temperature for a better visual representation\n","state_data_sorted = state_data.sort_values(by='temp_c')\n","\n","# Plotting each state's mean temperature in degrees Celsius\n","plt.figure(figsize=(12, 8))\n","plt.barh(y=state_data_sorted['state'], width=state_data_sorted['temp_c'])\n","plt.xlabel(\"Temperature in degree Celsius\")\n","plt.ylabel(\"State\")\n","plt.title(\"Mean Temperature by State\")\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:33:18.946201Z","iopub.status.busy":"2021-10-24T22:33:18.945927Z","iopub.status.idle":"2021-10-24T22:33:18.957052Z","shell.execute_reply":"2021-10-24T22:33:18.955517Z","shell.execute_reply.started":"2021-10-24T22:33:18.946171Z"},"id":"pn-qVt_8q_90","trusted":true},"outputs":[],"source":["# store the name of the states in a list and sort them alphabetically\n","states = [state for state in weather_data['state'].value_counts().index]\n","states.sort()"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:33:18.958751Z","iopub.status.busy":"2021-10-24T22:33:18.958424Z","iopub.status.idle":"2021-10-24T22:33:18.965899Z","shell.execute_reply":"2021-10-24T22:33:18.965037Z","shell.execute_reply.started":"2021-10-24T22:33:18.958708Z"},"id":"A34MsZRK0QLY","trusted":true},"outputs":[],"source":["continuous_distributions.append('will_it_rain')\n","continuous_distributions.append('cloud')"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:33:18.967432Z","iopub.status.busy":"2021-10-24T22:33:18.967062Z","iopub.status.idle":"2021-10-24T22:33:18.977187Z","shell.execute_reply":"2021-10-24T22:33:18.976510Z","shell.execute_reply.started":"2021-10-24T22:33:18.967404Z"},"id":"ielpTwWz0M8b","trusted":true},"outputs":[],"source":["columns_to_analyze_1 = continuous_distributions\n","columns_to_analyze_2 = ['condition', 'wind_dir']"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:33:18.978741Z","iopub.status.busy":"2021-10-24T22:33:18.978412Z","iopub.status.idle":"2021-10-24T22:34:42.661057Z","shell.execute_reply":"2021-10-24T22:34:42.660481Z","shell.execute_reply.started":"2021-10-24T22:33:18.978713Z"},"id":"3qPiDfbNqvj9","outputId":"bbfdbe5b-2799-40e8-90ce-c51f03c73b88","trusted":true},"outputs":[],"source":["def statewise_data_analysis(columns_to_analyze_1, columns_to_analyze_2):\n","\n","  label_map = ['Day {}'.format(i) for i in range(1, 15)]\n","  ticks = [i for i in range(1,15)]\n","\n","  # Plotting average daily distributions from 15/10/2021-22/10/2021\n","\n","  for i in range(len(states)):\n","\n","    # Perform analysis for each state\n","    state = states[i]\n","    state_i_data = grouped_state_data.get_group(state)\n","    state_i_data['time'] = pd.to_datetime(state_i_data['time'])\n","\n","    print(\"=========================================================================={}'s ANALYSIS=================================================================================\".format(state.upper()))\n","    print()\n","\n","    # Exclude 'time' column\n","    columns_to_analyze_1 = [col for col in continuous_distributions if col != 'time']\n","\n","    # Group the data by time and calculate the mean of the other columns\n","    time_data = state_i_data.groupby('time')[columns_to_analyze_1].mean()\n","\n","    # Plot the daily average of all the continuous distributions and numerical variable\n","    plt.figure(figsize=(25, 25))\n","    for i, col in enumerate(columns_to_analyze_1):\n","      plt.subplot(7, 2, i + 1)\n","      plt.plot(time_data[col])\n","      #plt.xticks(rotation=-45)\n","      plt.xlabel(\"Date\")\n","      plt.ylabel(col)\n","    plt.show()\n","\n","    # Plotting categorical variable across states\n","    plt.figure(figsize=(25, 12))\n","    for j in range(len(columns_to_analyze_2)):\n","      plt.subplot(1, 2, j+1)\n","      curr_column = columns_to_analyze_2[j]\n","      data_to_plot = state_i_data[curr_column].value_counts().sort_values()\n","      plt.barh(y=data_to_plot.index, width=data_to_plot.values)\n","      plt.xlabel(\"Frequency\")\n","      plt.ylabel(curr_column)\n","    plt.show()\n","    \n","    print(\"====================================================================================================================================================================================\".format(state.upper()))\n","    print()\n","\n","# call the function\n","statewise_data_analysis(columns_to_analyze_1, columns_to_analyze_2)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:34:42.662577Z","iopub.status.busy":"2021-10-24T22:34:42.662154Z","iopub.status.idle":"2021-10-24T22:34:42.688599Z","shell.execute_reply":"2021-10-24T22:34:42.687798Z","shell.execute_reply.started":"2021-10-24T22:34:42.662546Z"},"id":"VXXhG8hg5-IU","outputId":"f9fa9e4d-d6a5-4a3c-e9b0-04f130969f4a","trusted":true},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","file_path = 'C:/Users/Subhradip Debray/Downloads/train/forecast_data.csv'  # Replace with your actual file path\n","weather_data = pd.read_csv(file_path)\n","non_numeric_cols = weather_data.select_dtypes(exclude=[np.number]).columns\n","for col in non_numeric_cols:\n","    weather_data[col] = pd.to_numeric(weather_data[col], errors='coerce')\n","non_numeric_cols_after_conversion = weather_data.select_dtypes(exclude=[np.number]).columns\n","numeric_cols = weather_data.select_dtypes(include=[np.number])\n","if 'will_it_rain' in weather_data.columns:\n","    numeric_cols = numeric_cols.drop(columns=['will_it_rain'])\n","mean_values = numeric_cols.groupby(weather_data['will_it_rain']).mean()\n","pd.set_option('display.width', 1900)\n","print(mean_values)\n"]},{"cell_type":"markdown","metadata":{"id":"x9L8qkEH9WiQ"},"source":["**From the above table, 'cloud' seems to be the feature which is makes a significant impact on predicting weather it will rain or not. (Which is quite logical).**"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["columns_to_analyze_3 = list(weather_data.groupby('will_it_rain').mean().columns)\n","columns_to_analyze_3.remove('time_epoch')"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# Load the CSV file\n","weather_data = pd.read_csv('forecast_data.csv')\n","\n","# Now, we'll define the function to analyze and visualize rain availability against each feature for each state\n","def statewise_rain_factor_analysis(columns_to_analyze, data):\n","    # Group data by state\n","    grouped_state_data = data.groupby('state')\n","\n","    # Iterate over each state\n","    for state, state_i_data in grouped_state_data:\n","        print(\"Analyzing state:\", state)\n","        \n","        # Plot rain availability against each feature\n","        for feature in columns_to_analyze:\n","            plt.figure(figsize=(10, 6))\n","            sns.boxplot(data=state_i_data, x='will_it_rain', y=feature)\n","            plt.xlabel(\"Will it Rain (0: No, 1: Yes)\")\n","            plt.ylabel(feature)\n","            plt.title(\"Rain Availability vs \" + feature + \" in \" + state)\n","            plt.show()\n","\n","# Call the function with the specified columns and data\n","columns_to_analyze = ['time_epoch', 'temp_c', 'temp_f', 'is_day', 'condition', 'wind_mph', 'wind_kph', 'wind_degree', 'wind_dir', 'pressure_mb', 'pressure_in', 'precip_mm', 'precip_in', 'humidity', 'cloud', 'feelslike_c', 'feelslike_f', 'windchill_c', 'windchill_f', 'heatindex_c', 'heatindex_f', 'dewpoint_c', 'dewpoint_f', 'chance_of_rain', 'chance_of_snow', 'vis_km', 'vis_miles', 'gust_mph', 'gust_kph', 'city', 'snow_cm', 'uv']\n","statewise_rain_factor_analysis(columns_to_analyze, weather_data)\n"]},{"cell_type":"markdown","metadata":{"id":"zld5Hcdx9vLw"},"source":["**Statewise analysis of factors shows a more granular approach on finding relation between features and the chances of raining.**"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:35:38.367837Z","iopub.status.busy":"2021-10-24T22:35:38.367619Z","iopub.status.idle":"2021-10-24T22:35:38.374622Z","shell.execute_reply":"2021-10-24T22:35:38.373735Z","shell.execute_reply.started":"2021-10-24T22:35:38.367811Z"},"id":"bFxkqvUn3GR2","outputId":"e0172158-1e01-426c-efaf-28d76257cadf","trusted":true},"outputs":[],"source":["continuous_distributions"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:35:38.376567Z","iopub.status.busy":"2021-10-24T22:35:38.375939Z","iopub.status.idle":"2021-10-24T22:35:38.386294Z","shell.execute_reply":"2021-10-24T22:35:38.385199Z","shell.execute_reply.started":"2021-10-24T22:35:38.376495Z"},"id":"engkvZQa3TpP","trusted":true},"outputs":[],"source":["continuous_distributions.remove('will_it_rain')"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:35:38.388097Z","iopub.status.busy":"2021-10-24T22:35:38.387713Z","iopub.status.idle":"2021-10-24T22:35:38.398712Z","shell.execute_reply":"2021-10-24T22:35:38.397826Z","shell.execute_reply.started":"2021-10-24T22:35:38.388064Z"},"id":"ImcQ8_QQgTFg","trusted":true},"outputs":[],"source":["continuous_distributions.remove('cloud')"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:35:38.400098Z","iopub.status.busy":"2021-10-24T22:35:38.399823Z","iopub.status.idle":"2021-10-24T22:35:57.274026Z","shell.execute_reply":"2021-10-24T22:35:57.273172Z","shell.execute_reply.started":"2021-10-24T22:35:38.400066Z"},"id":"NPc5E9mxZFUS","outputId":"086513e9-77be-4e06-eb4c-f113057c4e4b","trusted":true},"outputs":[],"source":["# Plotting scatter plots\n","\n","'''Plotting each continuous distribution against every other continuous distribution'''\n","weather_data[continuous_distributions].head()\n","for i in range(len(continuous_distributions)):\n","\n","  if i != len(continuous_distributions)-1:\n","    curr_column = continuous_distributions[i]\n","    print(\"================================================= {} SCATTER PLOT ===================================================\".format(curr_column))\n","    print()\n","    num_rows = len(continuous_distributions) - i\n","    for j in range(i+1, len(continuous_distributions)):\n","      next_column = continuous_distributions[j]\n","      plt.figure(figsize=(8,6))\n","      sns.scatterplot(data=weather_data, x=curr_column, y=next_column)\n","      plt.show()\n","    print(\"=======================================================================================================================\")\n","    print()"]},{"cell_type":"markdown","metadata":{"id":"YTPLOIb4f01M"},"source":["**Multicollinearity can be observed**"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:35:57.276002Z","iopub.status.busy":"2021-10-24T22:35:57.275654Z","iopub.status.idle":"2021-10-24T22:35:58.787453Z","shell.execute_reply":"2021-10-24T22:35:58.786556Z","shell.execute_reply.started":"2021-10-24T22:35:57.275939Z"},"id":"o1PTpn8DZGco","outputId":"41b98603-e67f-483f-efe6-8d5ec2d88aa7","trusted":true},"outputs":[],"source":["import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# Load the CSV file\n","weather_data = pd.read_csv('forecast_data.csv')\n","\n","# Select only numeric columns for correlation matrix\n","numeric_columns = weather_data.select_dtypes(include=['float64', 'int64'])\n","\n","# Plot the correlation heatmap\n","corr_matrix = numeric_columns.corr()\n","plt.figure(figsize=(14, 14))\n","sns.heatmap(corr_matrix, annot=True, cbar=False)\n","plt.show()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:35:58.788877Z","iopub.status.busy":"2021-10-24T22:35:58.788641Z","iopub.status.idle":"2021-10-24T22:35:58.821230Z","shell.execute_reply":"2021-10-24T22:35:58.820220Z","shell.execute_reply.started":"2021-10-24T22:35:58.788846Z"},"id":"mjycqveL985j","outputId":"3170953f-d041-4878-db41-a9568fc57a5d","trusted":true},"outputs":[],"source":["weather_data.head()"]},{"cell_type":"markdown","metadata":{"id":"nwla7BmlQi1P"},"source":["# Data Preprocessing"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:35:58.822874Z","iopub.status.busy":"2021-10-24T22:35:58.822570Z","iopub.status.idle":"2021-10-24T22:35:58.875158Z","shell.execute_reply":"2021-10-24T22:35:58.874280Z","shell.execute_reply.started":"2021-10-24T22:35:58.822840Z"},"id":"stA78e01QiWm","trusted":true},"outputs":[],"source":["# Encode the categorical text values\n","cols_to_encode = ['condition', 'wind_dir', 'state', 'city']\n","for col in cols_to_encode:\n","  le = LabelEncoder()\n","  weather_data[col] = le.fit_transform(weather_data[col])"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:35:58.876938Z","iopub.status.busy":"2021-10-24T22:35:58.876608Z","iopub.status.idle":"2021-10-24T22:35:58.907572Z","shell.execute_reply":"2021-10-24T22:35:58.906722Z","shell.execute_reply.started":"2021-10-24T22:35:58.876897Z"},"id":"KYmryV5MRmGg","outputId":"1ae6ecc0-7bdb-4fbf-e676-7c19f7d76429","trusted":true},"outputs":[],"source":["weather_data.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:35:58.909391Z","iopub.status.busy":"2021-10-24T22:35:58.908905Z","iopub.status.idle":"2021-10-24T22:35:58.916842Z","shell.execute_reply":"2021-10-24T22:35:58.916036Z","shell.execute_reply.started":"2021-10-24T22:35:58.909362Z"},"id":"W3A4aVZkRx8y","trusted":true},"outputs":[],"source":["# drop the time column\n","weather_data.drop('time', axis=1, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:35:58.918955Z","iopub.status.busy":"2021-10-24T22:35:58.918345Z","iopub.status.idle":"2021-10-24T22:35:58.943754Z","shell.execute_reply":"2021-10-24T22:35:58.943124Z","shell.execute_reply.started":"2021-10-24T22:35:58.918902Z"},"id":"UqqSfyLwRkyn","trusted":true},"outputs":[],"source":["# Scale the data\n","X = weather_data.drop('will_it_rain', axis=1)\n","y = weather_data['will_it_rain']\n","\n","X_columns = X.columns\n","ss = StandardScaler()\n","X_scaled_arr = ss.fit_transform(X)\n","\n","# Create a new dataframe called X_scaled\n","X_scaled = pd.DataFrame(X_scaled_arr, columns=X_columns)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:35:58.945224Z","iopub.status.busy":"2021-10-24T22:35:58.944837Z","iopub.status.idle":"2021-10-24T22:35:58.966919Z","shell.execute_reply":"2021-10-24T22:35:58.966342Z","shell.execute_reply.started":"2021-10-24T22:35:58.945190Z"},"id":"kpR_mjNQSQ-N","outputId":"68dba07e-0bdf-41f4-9fd5-99b050c3f3e6","trusted":true},"outputs":[],"source":["X_scaled.head()"]},{"cell_type":"markdown","metadata":{"id":"4XwdWce_DVBw"},"source":["# Feature Selection"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:35:58.968455Z","iopub.status.busy":"2021-10-24T22:35:58.968136Z","iopub.status.idle":"2021-10-24T22:36:29.056885Z","shell.execute_reply":"2021-10-24T22:36:29.056038Z","shell.execute_reply.started":"2021-10-24T22:35:58.968426Z"},"id":"7m-K-0xhnH0Y","outputId":"66eca9bc-e587-4ff4-d292-a555ae8ddaa5","trusted":true},"outputs":[],"source":["# Using recursive feature elimination to select optimal number of features\n","\n","# Using an ensemble model like Random Forest to use as the model.\n","\n","'''\n","Q. How to select a model for using RFE?\n","A. One approach, use a model that offers scoring of features, like feature_importances_ in Random Forest.\n","'''\n","\n","rfe_model = RandomForestClassifier()\n","rfe = RFE(rfe_model, verbose=3)\n","X_rfe = rfe.fit_transform(X_scaled, y)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:29.058964Z","iopub.status.busy":"2021-10-24T22:36:29.058195Z","iopub.status.idle":"2021-10-24T22:36:29.064667Z","shell.execute_reply":"2021-10-24T22:36:29.063885Z","shell.execute_reply.started":"2021-10-24T22:36:29.058906Z"},"id":"xCv36vIzTzH_","trusted":true},"outputs":[],"source":["# Extract the important features\n","feature_series = pd.Series(rfe.support_, index=X_columns)\n","important_features = list(feature_series[feature_series == True].index)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:29.066485Z","iopub.status.busy":"2021-10-24T22:36:29.066109Z","iopub.status.idle":"2021-10-24T22:36:29.078780Z","shell.execute_reply":"2021-10-24T22:36:29.077861Z","shell.execute_reply.started":"2021-10-24T22:36:29.066442Z"},"id":"jNIxqOk3USWg","outputId":"2ed2e3ff-3454-4b3c-8c45-54f97707a4e9","trusted":true},"outputs":[],"source":["print(important_features)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:29.081093Z","iopub.status.busy":"2021-10-24T22:36:29.080168Z","iopub.status.idle":"2021-10-24T22:36:29.089765Z","shell.execute_reply":"2021-10-24T22:36:29.089187Z","shell.execute_reply.started":"2021-10-24T22:36:29.081049Z"},"id":"eyD-IYgpTKQw","trusted":true},"outputs":[],"source":["# Prepare the final dataset\n","X_final = X_scaled[important_features]"]},{"cell_type":"markdown","metadata":{"id":"PDw8GiSnUcW2"},"source":["# Classification"]},{"cell_type":"markdown","metadata":{"id":"Y8Xm9V2ZUkAU"},"source":["## Classification using ML techniques"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:29.091489Z","iopub.status.busy":"2021-10-24T22:36:29.091184Z","iopub.status.idle":"2021-10-24T22:36:29.106443Z","shell.execute_reply":"2021-10-24T22:36:29.105677Z","shell.execute_reply.started":"2021-10-24T22:36:29.091451Z"},"id":"ZpJq5OoUUbp6","trusted":true},"outputs":[],"source":["# Split the data into training and testing set\n","X_train, X_test, y_train, y_test = train_test_split(X_final, y, test_size=0.2, random_state=42)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:29.108119Z","iopub.status.busy":"2021-10-24T22:36:29.107695Z","iopub.status.idle":"2021-10-24T22:36:29.123614Z","shell.execute_reply":"2021-10-24T22:36:29.122619Z","shell.execute_reply.started":"2021-10-24T22:36:29.108072Z"},"id":"oo9j4EtgUr5H","trusted":true},"outputs":[],"source":["'''\n","Chosing Metric:\n","The problem is on a given day, predict whether it will rain or not. \n","Hence, in this case the priority should be reduce the number of False Negatives or reduce the type II error.\n","\n","So, in this case Recall should be the ideal metric that should be optimised.\n","\n","Recall = TP/(TP + FN) where, TP: True Positives ; FN: False Negatives\n","'''\n","\n","# We are going to chose a model which gives maximum recall, in case of tie we are going to see which one gives maximum TPs.\n","\n","# 1. Compute Recall Score\n","def compute_recall_score(model_dict, X_train=X_train, X_test=X_test, y_train=y_train, y_test=y_test):\n","\n","  model_name = list(model_dict.keys())[0]\n","  model_obj = list(model_dict.values())[0]\n","\n","  # Make predictions\n","\n","  # 1. Training predictions\n","  train_preds = model_obj.predict(X_train)\n","\n","  # 2. Testing predictions\n","  test_preds = model_obj.predict(X_test)\n","\n","  # Compute Recall Score\n","\n","  # 1. Training Score\n","  train_recall = recall_score(y_train, train_preds)\n","\n","  # 2. Testing score\n","  test_recall = recall_score(y_test, test_preds)\n","\n","  # Display the result\n","  result_arr = np.array([train_recall, test_recall])\n","  result_df = pd.DataFrame(data = result_arr.reshape(1,2), columns = ['Train_Recall', 'Test_Recall'], index=[model_name])\n","\n","  return result_df\n","\n","# Plot the Confusion Matrix\n","def plot_confusion_matrix(model_dict, X_train=X_train, X_test=X_test, y_train=y_train, y_test=y_test):\n","\n","  model_name = list(model_dict.keys())[0]\n","  model_obj = list(model_dict.values())[0]\n","\n","  # Make predictions\n","\n","  # 1. Training predictions\n","  train_preds = model_obj.predict(X_train)\n","\n","  # 2. Testing predictions\n","  test_preds = model_obj.predict(X_test)\n","\n","  # Compute Recall Score\n","\n","  # 1. Training Score\n","  train_recall = confusion_matrix(y_train, train_preds)\n","\n","  # 2. Testing score\n","  test_recall = confusion_matrix(y_test, test_preds)\n","\n","  # Plot the heatmap\n","  fig, ax = plt.subplots(1, 2, figsize=(15,8))\n","\n","  # PLot the trainig matrix\n","  sns.heatmap(train_recall, annot=True, cbar=False, ax=ax[0], fmt='g')\n","  ax[0].set_xlabel(\"Predicted Values\")\n","  ax[0].set_ylabel(\"Actual Values\")\n","  ax[0].set_title(\"Training Set Results\")\n","\n","  # Plot the testing matrix\n","  sns.heatmap(test_recall, annot=True, cbar=False, ax=ax[1], fmt='g')\n","  ax[1].set_xlabel(\"Predicted Values\")\n","  ax[1].set_ylabel(\"Actual Values\")\n","  ax[1].set_title(\"Testing Set Results\")\n","\n","  fig.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:29.125156Z","iopub.status.busy":"2021-10-24T22:36:29.124796Z","iopub.status.idle":"2021-10-24T22:36:34.399551Z","shell.execute_reply":"2021-10-24T22:36:34.398809Z","shell.execute_reply.started":"2021-10-24T22:36:29.125121Z"},"id":"W5Q-c9uHUtgm","outputId":"52a7be19-1bc7-4643-ec2d-6b5585dde1cd","trusted":true},"outputs":[],"source":["# 1. Baseline Model -> KNN\n","knn_clf = KNeighborsClassifier()\n","knn_clf.fit(X_train, y_train)\n","\n","# Compute Scores and plot confusion matrix\n","model_dict={'KNN' : knn_clf}\n","knn_results = compute_recall_score(model_dict=model_dict)\n","plot_confusion_matrix(model_dict=model_dict)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:34.401065Z","iopub.status.busy":"2021-10-24T22:36:34.400833Z","iopub.status.idle":"2021-10-24T22:36:34.409554Z","shell.execute_reply":"2021-10-24T22:36:34.408798Z","shell.execute_reply.started":"2021-10-24T22:36:34.401039Z"},"id":"xY0nkSteaZy9","outputId":"f5cb1446-3f97-4b27-af8e-d8ae7a9f004f","trusted":true},"outputs":[],"source":["knn_results"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:34.411662Z","iopub.status.busy":"2021-10-24T22:36:34.410882Z","iopub.status.idle":"2021-10-24T22:36:37.172018Z","shell.execute_reply":"2021-10-24T22:36:37.171183Z","shell.execute_reply.started":"2021-10-24T22:36:34.411616Z"},"id":"zMzR3e8kdDSj","outputId":"018ae244-94c7-4d6e-cb39-c5bc749cade4","trusted":true},"outputs":[],"source":["# 2. Logistic Regression\n","lr_clf = LogisticRegressionCV()\n","lr_clf.fit(X_train, y_train)\n","\n","# Compute Scores and plot confusion matrix\n","model_dict={'LogisticRegression' : lr_clf}\n","lr_results = compute_recall_score(model_dict=model_dict)\n","plot_confusion_matrix(model_dict=model_dict)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:37.173481Z","iopub.status.busy":"2021-10-24T22:36:37.173247Z","iopub.status.idle":"2021-10-24T22:36:37.183524Z","shell.execute_reply":"2021-10-24T22:36:37.182458Z","shell.execute_reply.started":"2021-10-24T22:36:37.173452Z"},"id":"CwqHX7XYdUA_","outputId":"5f8d32e4-0616-420a-ae52-8db0df6d934f","trusted":true},"outputs":[],"source":["lr_results"]},{"cell_type":"markdown","metadata":{"id":"zGNUEwSHdkec"},"source":["**Logistic Regression seem to perform very poor**"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:37.185024Z","iopub.status.busy":"2021-10-24T22:36:37.184769Z","iopub.status.idle":"2021-10-24T22:36:37.605561Z","shell.execute_reply":"2021-10-24T22:36:37.604871Z","shell.execute_reply.started":"2021-10-24T22:36:37.184972Z"},"id":"X3zIrVApdZIP","outputId":"deb9f441-6be8-4743-adf1-8e2243ea8dbb","trusted":true},"outputs":[],"source":["# 3. Decision Tree\n","dt_clf = DecisionTreeClassifier()\n","dt_clf.fit(X_train, y_train)\n","\n","# Compute Scores and plot confusion matrix\n","model_dict={'DecisionTree' : dt_clf}\n","dt_results = compute_recall_score(model_dict=model_dict)\n","plot_confusion_matrix(model_dict=model_dict)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:37.607658Z","iopub.status.busy":"2021-10-24T22:36:37.607443Z","iopub.status.idle":"2021-10-24T22:36:37.617196Z","shell.execute_reply":"2021-10-24T22:36:37.616264Z","shell.execute_reply.started":"2021-10-24T22:36:37.607632Z"},"id":"gvvxGfqueXmf","outputId":"931e31ad-c1ac-441f-86d2-f9669ab0e333","trusted":true},"outputs":[],"source":["dt_results"]},{"cell_type":"markdown","metadata":{"id":"Z8Q28mrHebzW"},"source":["**Overfitting can be observed in case of Decision Trees**"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:37.619220Z","iopub.status.busy":"2021-10-24T22:36:37.618670Z","iopub.status.idle":"2021-10-24T22:36:48.132121Z","shell.execute_reply":"2021-10-24T22:36:48.131067Z","shell.execute_reply.started":"2021-10-24T22:36:37.619180Z"},"id":"oHFjGkWbeZUj","outputId":"4a105d30-b3bf-4042-8713-edafef3bf22f","trusted":true},"outputs":[],"source":["# 4. SVM\n","svm_clf = SVC()\n","svm_clf.fit(X_train, y_train)\n","\n","# Compute Scores and plot confusion matrix\n","model_dict={'SVM' : svm_clf}\n","svm_results = compute_recall_score(model_dict=model_dict)\n","plot_confusion_matrix(model_dict=model_dict)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:48.133575Z","iopub.status.busy":"2021-10-24T22:36:48.133343Z","iopub.status.idle":"2021-10-24T22:36:48.142668Z","shell.execute_reply":"2021-10-24T22:36:48.142001Z","shell.execute_reply.started":"2021-10-24T22:36:48.133547Z"},"id":"_BXNIbdfetvA","outputId":"d19fac9c-a89f-4b88-882d-94ea58fec3b9","trusted":true},"outputs":[],"source":["svm_results"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:48.143996Z","iopub.status.busy":"2021-10-24T22:36:48.143701Z","iopub.status.idle":"2021-10-24T22:36:50.770267Z","shell.execute_reply":"2021-10-24T22:36:50.769393Z","shell.execute_reply.started":"2021-10-24T22:36:48.143952Z"},"id":"1yM7RNSdewv4","outputId":"df554987-f6c3-4104-984b-e5fe54069423","trusted":true},"outputs":[],"source":["# 5. Random Forest\n","rf_clf = RandomForestClassifier()\n","rf_clf.fit(X_train, y_train)\n","\n","# Compute Scores and plot confusion matrix\n","model_dict={'RandomForest' : rf_clf}\n","rf_results = compute_recall_score(model_dict=model_dict)\n","plot_confusion_matrix(model_dict=model_dict)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:50.772338Z","iopub.status.busy":"2021-10-24T22:36:50.771785Z","iopub.status.idle":"2021-10-24T22:36:50.782983Z","shell.execute_reply":"2021-10-24T22:36:50.782067Z","shell.execute_reply.started":"2021-10-24T22:36:50.772292Z"},"id":"-R8Ev04we_P7","outputId":"ea3c1722-b08d-4308-f106-058341280a57","trusted":true},"outputs":[],"source":["rf_results"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:50.784359Z","iopub.status.busy":"2021-10-24T22:36:50.784076Z","iopub.status.idle":"2021-10-24T22:36:52.693634Z","shell.execute_reply":"2021-10-24T22:36:52.693057Z","shell.execute_reply.started":"2021-10-24T22:36:50.784319Z"},"id":"BCYLFO1dfCXQ","outputId":"56d1261e-11c9-4646-d9ef-35f906a9aaf2","trusted":true},"outputs":[],"source":["# 6. Extra Trees\n","ext_clf = ExtraTreesClassifier()\n","ext_clf.fit(X_train, y_train)\n","\n","# Compute Scores and plot confusion matrix\n","model_dict={'ExtraTrees' : ext_clf}\n","ext_results = compute_recall_score(model_dict=model_dict)\n","plot_confusion_matrix(model_dict=model_dict)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:52.694842Z","iopub.status.busy":"2021-10-24T22:36:52.694528Z","iopub.status.idle":"2021-10-24T22:36:52.705187Z","shell.execute_reply":"2021-10-24T22:36:52.704406Z","shell.execute_reply.started":"2021-10-24T22:36:52.694814Z"},"id":"qG76ltLDf6O9","outputId":"a3d585b6-7024-43a7-8015-91a5f63483e9","trusted":true},"outputs":[],"source":["ext_results"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:52.706883Z","iopub.status.busy":"2021-10-24T22:36:52.706424Z","iopub.status.idle":"2021-10-24T22:36:53.915137Z","shell.execute_reply":"2021-10-24T22:36:53.914248Z","shell.execute_reply.started":"2021-10-24T22:36:52.706852Z"},"id":"Vz-bjnLDf93z","outputId":"c018e54f-e083-4b75-d3f8-771c96c83e59","trusted":true},"outputs":[],"source":["# 7. XGBoost\n","xgb_clf = XGBClassifier()\n","xgb_clf.fit(X_train, y_train)\n","\n","# Compute Scores and plot confusion matrix\n","model_dict={'XGBoost' : xgb_clf}\n","xgb_results = compute_recall_score(model_dict=model_dict)\n","plot_confusion_matrix(model_dict=model_dict)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:53.916923Z","iopub.status.busy":"2021-10-24T22:36:53.916443Z","iopub.status.idle":"2021-10-24T22:36:53.926736Z","shell.execute_reply":"2021-10-24T22:36:53.925918Z","shell.execute_reply.started":"2021-10-24T22:36:53.916890Z"},"id":"3nVftkLqgROs","outputId":"56a2c9ac-fffd-4110-edb3-f31978c50a50","trusted":true},"outputs":[],"source":["xgb_results"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:53.928177Z","iopub.status.busy":"2021-10-24T22:36:53.927865Z","iopub.status.idle":"2021-10-24T22:36:54.645431Z","shell.execute_reply":"2021-10-24T22:36:54.644376Z","shell.execute_reply.started":"2021-10-24T22:36:53.928138Z"},"id":"YlJzf1OrgUY3","outputId":"30f9339f-0438-4ad9-dd1b-bfbb4bdfc08c","trusted":true},"outputs":[],"source":["# 8. LightGBM\n","lgbm_clf = LGBMClassifier()\n","lgbm_clf.fit(X_train, y_train)\n","\n","# Compute Scores and plot confusion matrix\n","model_dict={'LightGBM' : lgbm_clf}\n","lgbm_results = compute_recall_score(model_dict=model_dict)\n","plot_confusion_matrix(model_dict=model_dict)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:54.647101Z","iopub.status.busy":"2021-10-24T22:36:54.646768Z","iopub.status.idle":"2021-10-24T22:36:54.656874Z","shell.execute_reply":"2021-10-24T22:36:54.656074Z","shell.execute_reply.started":"2021-10-24T22:36:54.647059Z"},"id":"i5OVgz0wgkgd","outputId":"bec9106d-2179-4bfd-b59b-b3e1c13f5700","trusted":true},"outputs":[],"source":["lgbm_results"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:54.658863Z","iopub.status.busy":"2021-10-24T22:36:54.658273Z","iopub.status.idle":"2021-10-24T22:36:54.675682Z","shell.execute_reply":"2021-10-24T22:36:54.674713Z","shell.execute_reply.started":"2021-10-24T22:36:54.658818Z"},"id":"_nq3-DOHglYK","outputId":"b9d35cf2-0c71-42e0-d865-568dfc0738ff","trusted":true},"outputs":[],"source":["# Concatenate the results\n","final_results = pd.concat((knn_results, lr_results, \n","                           svm_results, dt_results, \n","                           rf_results, ext_results, \n","                           xgb_results, lgbm_results), axis=0).sort_values(by='Test_Recall', ascending=False)\n","final_results"]},{"cell_type":"markdown","metadata":{"id":"jbIAtvj03xjb"},"source":["\n","1.   XGBoost and SVM are giving generalised results.\n","2.   Extra Trees, Decision Tree and Random Forest seem to overfit a little.\n"]},{"cell_type":"markdown","metadata":{"id":"dZtF3YI95B5q"},"source":["## Hyperparameter Tuning\n","\n","**Tune the top 2 models i.e LightGBM and ExtraTrees**"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:36:54.677564Z","iopub.status.busy":"2021-10-24T22:36:54.677276Z","iopub.status.idle":"2021-10-24T22:37:12.571420Z","shell.execute_reply":"2021-10-24T22:37:12.570451Z","shell.execute_reply.started":"2021-10-24T22:36:54.677523Z"},"id":"g-Z5kPdLhRhL","outputId":"6ad0e500-f9a7-4939-f92d-652c79d0af50","trusted":true},"outputs":[],"source":["# 1. Light GBM\n","lgbm_params = {\"num_leaves\" : [31, 50, 70, 90, 110],\n","               \"max_depth\" : [10, 20, 30, 40, 50, 60],\n","               \"learning_rate\" : [0.1, 0.5, 1, 1.5, 2.0],\n","               \"n_estimators\" : [100, 150, 200, 250, 300, 350],\n","               \"reg_alpha\" : [0.0, 0.25, 0.50, 0.75, 1.0, 2.0],\n","               \"reg_lambda\" : [0.0, 0.25, 0.50, 0.75, 1.0, 2.0],\n","               \"colsample_bytree\" : [0.0, 0.25, 0.50, 0.75, 1.0]\n","               }\n","\n","lgbm_clf_2 = LGBMClassifier()\n","\n","# using randomised search cv\n","rf_lgbm_clf = RandomizedSearchCV(lgbm_clf_2, lgbm_params, n_iter=20, scoring='recall', n_jobs=-1, cv=3, verbose=3, random_state=0)\n","rf_lgbm_clf.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:37:12.576025Z","iopub.status.busy":"2021-10-24T22:37:12.575151Z","iopub.status.idle":"2021-10-24T22:37:13.284584Z","shell.execute_reply":"2021-10-24T22:37:13.283685Z","shell.execute_reply.started":"2021-10-24T22:37:12.575974Z"},"id":"2233zyJi8nOv","outputId":"946af43c-8198-4319-9022-072bd24abefc","trusted":true},"outputs":[],"source":["# Store the Best estimator\n","lgbm_best = rf_lgbm_clf.best_estimator_\n","\n","# Generate Results\n","model_dict = {'LGBM_Tuned' : lgbm_best}\n","lgbm_best_results = compute_recall_score(model_dict)\n","plot_confusion_matrix(model_dict)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:37:13.286698Z","iopub.status.busy":"2021-10-24T22:37:13.286365Z","iopub.status.idle":"2021-10-24T22:37:13.298157Z","shell.execute_reply":"2021-10-24T22:37:13.297054Z","shell.execute_reply.started":"2021-10-24T22:37:13.286656Z"},"id":"ZzDeUWiW9pJv","outputId":"fc02047b-d287-485c-e429-e09ee155968c","trusted":true},"outputs":[],"source":["lgbm_best_results"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:37:13.299940Z","iopub.status.busy":"2021-10-24T22:37:13.299561Z","iopub.status.idle":"2021-10-24T22:37:48.433907Z","shell.execute_reply":"2021-10-24T22:37:48.433017Z","shell.execute_reply.started":"2021-10-24T22:37:13.299894Z"},"id":"IfReAW2h65xR","outputId":"22ff3394-65bb-4d1f-f180-c0bcd9bf6e55","trusted":true},"outputs":[],"source":["# 2. Extra Trees\n","ext_params = { \"max_depth\" : [10, 20, 30, 40, 50, 60],\n","               \"criterion\" : ['gini', 'entropy'],\n","               \"n_estimators\" : [100, 150, 200, 250, 300, 350],\n","               \"max_features\" : [\"auto\", \"sqrt\", \"log2\"],\n","               \"min_samples_split\" : [2, 4, 6, 8, 10],\n","               \"min_samples_leaf\" : [1, 2, 3, 4, 5, 6, 7],\n","               \"bootstrap\" : [True, False]\n","              }\n","\n","ext_clf_2 = ExtraTreesClassifier()\n","\n","# using randomised search cv\n","rf_ext_clf = RandomizedSearchCV(ext_clf_2, ext_params, n_iter=20, scoring='recall', n_jobs=-1, cv=3, verbose=3, random_state=0)\n","rf_ext_clf.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:37:48.435537Z","iopub.status.busy":"2021-10-24T22:37:48.435317Z","iopub.status.idle":"2021-10-24T22:37:50.797194Z","shell.execute_reply":"2021-10-24T22:37:50.796310Z","shell.execute_reply.started":"2021-10-24T22:37:48.435512Z"},"id":"rVPahLTJC_wv","outputId":"61b41cfc-827b-42e8-96fe-558f24a62eb3","trusted":true},"outputs":[],"source":["# Store the Best estimator\n","ext_best = rf_ext_clf.best_estimator_\n","\n","# Generate Results\n","model_dict = {'ExtraTrees_Tuned' : ext_best}\n","ext_best_results = compute_recall_score(model_dict)\n","plot_confusion_matrix(model_dict)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:37:50.798597Z","iopub.status.busy":"2021-10-24T22:37:50.798362Z","iopub.status.idle":"2021-10-24T22:37:50.807461Z","shell.execute_reply":"2021-10-24T22:37:50.806801Z","shell.execute_reply.started":"2021-10-24T22:37:50.798568Z"},"id":"Zc4aMYuBDE_8","outputId":"74070f39-4745-4c27-d5ef-4317342455e1","trusted":true},"outputs":[],"source":["ext_best_results"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:37:50.809522Z","iopub.status.busy":"2021-10-24T22:37:50.808627Z","iopub.status.idle":"2021-10-24T22:37:51.256523Z","shell.execute_reply":"2021-10-24T22:37:51.255906Z","shell.execute_reply.started":"2021-10-24T22:37:50.809492Z"},"id":"0wAyp8Q2iHE2","outputId":"a13f6981-1c69-468c-d7b5-80e6e7c75dec","trusted":true},"outputs":[],"source":["# Train the best light GBM model on the entire dataset\n","lgbm_best.fit(X_scaled, y)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2021-10-24T22:37:51.260543Z","iopub.status.busy":"2021-10-24T22:37:51.260082Z","iopub.status.idle":"2021-10-24T22:37:51.276480Z","shell.execute_reply":"2021-10-24T22:37:51.275797Z","shell.execute_reply.started":"2021-10-24T22:37:51.260508Z"},"id":"b9zKWsarHSdN","trusted":true},"outputs":[],"source":["# Dump the Hyperparameter tunes LGBM model\n","model_file = './LightGBM.pkl'\n","pickle.dump(lgbm_best, open(model_file, 'wb'))"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.9"}},"nbformat":4,"nbformat_minor":4}
